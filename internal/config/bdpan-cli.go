// code generated by https://github.com/go-dev-frame/sponge

package config

import (
	"github.com/go-dev-frame/sponge/pkg/conf"
)

var config *Config

func Init(configFile string, fs ...func()) error {
	config = &Config{}
	return conf.Parse(configFile, config, fs...)
}

func Show(hiddenFields ...string) string {
	return conf.Show(config, hiddenFields...)
}

func Get() *Config {
	if config == nil {
		panic("config is nil, please call config.Init() first")
	}
	return config
}

func Set(conf *Config) {
	config = conf
}

type Config struct {
	Access     Access     `yaml:"access" json:"access"`
	App        App        `yaml:"app" json:"app"`
	Credential Credential `yaml:"credential" json:"credential"`
	Database   Database   `yaml:"database" json:"database"`
	Logger     Logger     `yaml:"logger" json:"logger"`
}

type Access struct {
	AccessToken      string `yaml:"accessToken" json:"accessToken"`
	ExpiresIn        int    `yaml:"expiresIn" json:"expiresIn"`
	RefreshTimestamp int    `yaml:"refreshTimestamp" json:"refreshTimestamp"`
	RefreshToken     string `yaml:"refreshToken" json:"refreshToken"`
}

type Credential struct {
	AppID     string `yaml:"appId" json:"appId"`
	AppKey    string `yaml:"appKey" json:"appKey"`
	SecretKey string `yaml:"secretKey" json:"secretKey"`
	SignKey   string `yaml:"signKey" json:"signKey"`
}

type Sqlite struct {
	ConnMaxLifetime int    `yaml:"connMaxLifetime" json:"connMaxLifetime"`
	DBFile          string `yaml:"dbFile" json:"dbFile"`
	EnableLog       bool   `yaml:"enableLog" json:"enableLog"`
	MaxIdleConns    int    `yaml:"maxIdleConns" json:"maxIdleConns"`
	MaxOpenConns    int    `yaml:"maxOpenConns" json:"maxOpenConns"`
}

type Database struct {
	Driver string `yaml:"driver" json:"driver"`
	Sqlite Sqlite `yaml:"sqlite" json:"sqlite"`
}

type LogFileConfig struct {
	Filename string `yaml:"filename" json:"filename"`
}

type Logger struct {
	Format        string        `yaml:"format" json:"format"`
	IsSave        bool          `yaml:"isSave" json:"isSave"`
	Level         string        `yaml:"level" json:"level"`
	LogFileConfig LogFileConfig `yaml:"logFileConfig" json:"logFileConfig"`
}

type App struct {
	Name  string `yaml:"name" json:"name"`
	Scope string `yaml:"scope" json:"scope"`
}
